import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { useState } from 'react'
import { useEffect } from 'react'
import {ethers} from "ethers";
import contract_abi from '@src/src/artifacts/contracts/Game.sol/Game.json';
const inter = Inter({ subsets: ['latin'] })

const contractAddress = "0x53C1C0a5B7854ec21eA76BdAF8868C9852604d84";
const GameAbi = contract_abi.abi;

export default function Home() {

  const [isConnected, setIsConnected] = useState(false);
  const [provider, setProvider] = useState();
  const [connectedWallet, setIsConnectedWallet] = useState();
  const [contract, setContract] = useState();
  const [signer, setSigner] = useState();
  const [currentBalance, setCurrentBalance] = useState();
  const [randomSet, setRandomSet] = useState(false)
  const [winner,setWinner] = useState(false);

  const connectMetamask = async() => {
    if(typeof window.ethereum !== "undefined") {
      try {
        let wallet = await ethereum.request({ method: "eth_requestAccounts" });
        setIsConnectedWallet(wallet);
        setIsConnected(true);
        const connectedProvider = new ethers.providers.Web3Provider(window.ethereum);
        const s = await connectedProvider.getSigner();
        setProvider(connectedProvider);
        setSigner(s);
      } catch (e) {
        console.log(e);
      }
    }else{
      setIsConnected(false);
    }
  }

  const callContract = async() => {
    const Game = new ethers.Contract(contractAddress, GameAbi, signer);
    setContract(Game);
  }

  const balanceInquiry = async() => {
    setCurrentBalance((await contract.getBalance()).toNumber());
  }

  const generateRandom = async() => {
    try {
      await contract.generateRandom();
      alert("Random No. is Set !")
      setRandomSet(true);
    } catch (e) {
      alert("Random No. not set")
    }
  }

  const guessNum = async() => {
    try {
      let prediction = prompt("Enter your random prediction:");
      let winStatus = await contract.guess(prediction);
      setWinner(winStatus);
    } catch (e) {
      alert("Guessing function failed. Execute again..")
    }
  }

  const claimReward = async() => {
    try {
      if(winStatus) {
        await contract.claimReward();
        alert("Your reward of 0.1 ETH has been sent to your account")
      }
      else {
        alert("You have to win to claim the reward.")
      }
    } catch (e) {
      alert("There was an error. Try claiming the reward again.")
    }
  }

  useEffect(() => {
    if(contract !== undefined) { 
      balanceInquiry();
    }
  }, [contract]);


  return (
    <>
      <Head>
        <title>Lucky Game</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>Lucky Game - Let's test your luck (Win FREE ETH!!!)</h1><br/>
        {!isConnected && <button onClick={connectMetamask}>CONNECT</button>}
        {isConnected && 
            <div className='flex-div'>
              <button disabled>CONNECTED</button><br/>
              <span><span>WALLET ADDRESS:</span> {connectedWallet}</span>
              {!contract && <button onClick={callContract}>CONNECT SMART CONTRACT</button> }<br/>
              {contract && 
                <div className='flex-div'>
                <button disabled>CONTRACT CONNECTED</button><br/>
                <button onClick={generateRandom}>GENERATE THE RANDOM NUMBER</button><br/>
                {randomSet &&
                  <div>
                    <button onClick={guessNum}>GUESS THE NUMBER</button>
                    {winner && <h3>You are a winner!!!</h3>}
                    {winner && 
                      <button onClick={claimReward}>CLAIM YOUR REWARD</button>
                    }
                  </div>
                }
                </div> }
            </div>
        }
      </main>
    </>
  )
}
